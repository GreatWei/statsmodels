# coding: utf-8

# DO NOT EDIT
# Autogenerated from the notebook regression_diagnostics.ipynb.
# Edit the notebook and then sync the output with this file.
#
# flake8: noqa
# DO NOT EDIT

# # 回归诊断

# 这个示例文件展示了如何在现实环境中使用一些 ``statsmodels'' 回归诊断检验。
# 您可以在[回归诊断页面]（https://www.statsmodels.org/stable/diagnostic.html）上了解更多检验，并在检验中找到更多信息。


# 请注意，此处大多数检验描述仅返回一个元组数字，无任何注释。 输出的完整描述始终包含在文档字符串和在线 ``statsmodels'' 文档中。
# 为了便于演示，我们在下面的示例中使用 ``zip(name,test)`` 构造漂亮的简短描述。


# ## 估计回归模型

from statsmodels.compat import lzip

import numpy as np
import pandas as pd
import statsmodels.formula.api as smf
import statsmodels.stats.api as sms
import matplotlib.pyplot as plt

# 加载数据
url = 'https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/HistData/Guerry.csv'
dat = pd.read_csv(url)

# 拟合回归模型（使用回归变量之一是自然对数）
results = smf.ols('Lottery ~ Literacy + np.log(Pop1831)', data=dat).fit()

# 检查结果
print(results.summary())

# ## 残差的正态性

# Jarque-Bera 检验:

name = ['Jarque-Bera', 'Chi^2 two-tail prob.', 'Skew', 'Kurtosis']
test = sms.jarque_bera(results.resid)
lzip(name, test)

# Omni 检验:

name = ['Chi^2', 'Two-tail probability']
test = sms.omni_normtest(results.resid)
lzip(name, test)

# ## 影响力测试
#
# 一旦创建，``OLSInfluence'' 类的对象将具有允许用户评估每个观察结果的属性和方法。 
# 例如，我们可以通过以下方式计算和提取 DFbetas 的前几行：


from statsmodels.stats.outliers_influence import OLSInfluence
test_class = OLSInfluence(results)
test_class.dfbetas[:5, :]

# 输入 ``dir(influence_test)`` 探索其他选项
#
# 也可以绘制有关杠杆的有用信息:

from statsmodels.graphics.regressionplots import plot_leverage_resid2
fig, ax = plt.subplots(figsize=(8, 6))
fig = plot_leverage_resid2(results, ax=ax)

# 其他绘图选项可以在 [图形页面] 上找到。(https://www.statsmodels.org/stable/graphics.html)

# ## 多重共线性
#
# 条件编号：

np.linalg.cond(results.model.exog)

# ## 异方差检验
#
# Breush-Pagan 检验:

name = ['Lagrange multiplier statistic', 'p-value',
        'f-value', 'f p-value']
test = sms.het_breuschpagan(results.resid, results.model.exog)
lzip(name, test)

# Goldfeld-Quandt 检验

name = ['F statistic', 'p-value']
test = sms.het_goldfeldquandt(results.resid, results.model.exog)
lzip(name, test)

# ## 线性度
#
# Harvey-Collier 乘数检验用于零假设，即线性规范正确：

name = ['t value', 'p value']
test = sms.linear_harvey_collier(results)
lzip(name, test)
