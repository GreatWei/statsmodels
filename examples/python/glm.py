# coding: utf-8

# DO NOT EDIT
# Autogenerated from the notebook glm.ipynb.
# Edit the notebook and then sync the output with this file.
#
# flake8: noqa
# DO NOT EDIT

# # 广义线性模型

import numpy as np
import statsmodels.api as sm
from scipy import stats
from matplotlib import pyplot as plt

# ## GLM: 二项式响应数据
#
# ### 加载数据
#
# 在此示例中，我们使用 Star98 的数据集，该数据集来自 Jeff Gill（2000）的许可下获取的广义线性模型：统一方法。 可以通过键入以下内容获得码本信息：


print(sm.datasets.star98.NOTE)

# 加载数据，并将常数项添加到外生（独立）变量中：

data = sm.datasets.star98.load()
data.exog = sm.add_constant(data.exog, prepend=False)

#  因变量是 N by 2 (Success: NABOVE, Failure: NBELOW):

print(data.endog[:5, :])

#  自变量包括上述所有其他变量以及交互项：

print(data.exog[:2, :])

# ### Fit 和 summary

glm_binom = sm.GLM(data.endog, data.exog, family=sm.families.Binomial())
res = glm_binom.fit()
print(res.summary())

# ### Quantities of interest

print('Total number of trials:', data.endog[0].sum())
print('Parameters: ', res.params)
print('T-values: ', res.tvalues)

# 第一个差异：我们将所有解释变量保持在其均值不变，并操纵低收入家庭的百分比来评估其对响应变量的影响：

means = data.exog.mean(axis=0)
means25 = means.copy()
means25[0] = stats.scoreatpercentile(data.exog[:, 0], 25)
means75 = means.copy()
means75[0] = lowinc_75per = stats.scoreatpercentile(data.exog[:, 0], 75)
resp_25 = res.predict(means25)
resp_75 = res.predict(means75)
diff = resp_75 - resp_25

# 学区中低收入家庭的百分比的四分位差是:

print("%2.4f%%" % (diff * 100))

# ### Plots
#
# 我们提取信息用于绘制一些有趣图:

nobs = res.nobs
y = data.endog[:, 0] / data.endog.sum(1)
yhat = res.mu

# Plot yhat vs y:

from statsmodels.graphics.api import abline_plot

fig, ax = plt.subplots()
ax.scatter(yhat, y)
line_fit = sm.OLS(y, sm.add_constant(yhat, prepend=True)).fit()
abline_plot(model_results=line_fit, ax=ax)

ax.set_title('Model Fit Plot')
ax.set_ylabel('Observed values')
ax.set_xlabel('Fitted values')

# Plot yhat vs. Pearson residuals:

fig, ax = plt.subplots()

ax.scatter(yhat, res.resid_pearson)
ax.hlines(0, 0, 1)
ax.set_xlim(0, 1)
ax.set_title('Residual Dependence Plot')
ax.set_ylabel('Pearson Residuals')
ax.set_xlabel('Fitted values')

# 标准化偏差残差直方图:

from scipy import stats

fig, ax = plt.subplots()

resid = res.resid_deviance.copy()
resid_std = stats.zscore(resid)
ax.hist(resid_std, bins=25)
ax.set_title('Histogram of standardized deviance residuals')

# 偏差残差QQ图:

from statsmodels import graphics
graphics.gofplots.qqplot(resid, line='r')

# ## GLM: 比例计数响应的 Gamma
#
# ### 加载数据
#
# 在上面的示例中，我们输出了 ``NOTE`` 属性来了解 Star98 数据集。 statsmodels 数据集附带了其他有用信息。 例如：

print(sm.datasets.scotland.DESCRLONG)

#  加载数据并给外生变量添加常数项:

data2 = sm.datasets.scotland.load()
data2.exog = sm.add_constant(data2.exog, prepend=False)
print(data2.exog[:5, :])
print(data2.endog[:5])

# ### Fit 和 summary

glm_gamma = sm.GLM(data2.endog, data2.exog, family=sm.families.Gamma())
glm_results = glm_gamma.fit()
print(glm_results.summary())

# ## GLM: 具有非规范链接的高斯分布
#
# ### 人工数据

nobs2 = 100
x = np.arange(nobs2)
np.random.seed(54321)
X = np.column_stack((x, x**2))
X = sm.add_constant(X, prepend=False)
lny = np.exp(-(.03 * x + .0001 * x**2 - 1.0)) + .001 * np.random.rand(nobs2)

# ### Fit 和 summary

gauss_log = sm.GLM(lny, X, family=sm.families.Gaussian(sm.families.links.log))
gauss_log_results = gauss_log.fit()
print(gauss_log_results.summary())
