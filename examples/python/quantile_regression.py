# coding: utf-8

# DO NOT EDIT
# Autogenerated from the notebook quantile_regression.ipynb.
# Edit the notebook and then sync the output with this file.
#
# flake8: noqa
# DO NOT EDIT

# # 分位数回归

#
# 这个示例页面展示了如何使用 ``statsmodels.QuantReg`` 类来复制分析发行的部分
#
# * Koenker, Roger 和 Kevin F. Hallock. "分位数回归"。 经济观点杂志，第15卷，第4期，2001秋季，第143-156页
#
# 我们对 1857 年比利时工人阶级家庭收入和食物支出之间的关系感兴趣（Engel数据）。


# ## 设置
#
# 首先，我们需要加载一些模块并导入数据。 方便的是 ``statsmodels'' 附带了 Engel 数据集.

import numpy as np
import pandas as pd
import statsmodels.api as sm
import statsmodels.formula.api as smf
import matplotlib.pyplot as plt

data = sm.datasets.engel.load_pandas().data
data.head()

# ## 最小绝对偏差
#
# LAD模型是分位数回归的一种特殊情况，其中 q=0.5

mod = smf.quantreg('foodexp ~ income', data)
res = mod.fit(q=.5)
print(res.summary())

# ## 可视化结果
#
# 我们估计了介于.05和.95之间的许多分位数的分位数回归模型，
# 并将这些模型中的每一个的最佳拟合线与普通最小二乘结果进行比较。

# ### 准备绘图数据
#
# 为了方便起见，我们将分位数回归结果存到 Pandas.DataFrame 中，将 OLS 结果存在字典中。

quantiles = np.arange(.05, .96, .1)


def fit_model(q):
    res = mod.fit(q=q)
    return [q, res.params['Intercept'], res.params['income']
            ] + res.conf_int().loc['income'].tolist()


models = [fit_model(x) for x in quantiles]
models = pd.DataFrame(models, columns=['q', 'a', 'b', 'lb', 'ub'])

ols = smf.ols('foodexp ~ income', data).fit()
ols_ci = ols.conf_int().loc['income'].tolist()
ols = dict(
    a=ols.params['Intercept'],
    b=ols.params['income'],
    lb=ols_ci[0],
    ub=ols_ci[1])

print(models)
print(ols)

# ### 第一张图
#
# 这个图将 10 个分位数回归模型的最佳拟合线与最小二乘拟合相比较。 正如 Koenker 和 Hallock（2001）指出的那样，我们看到：
#
# 1. 食物支出随着收入增加而增加
# 2. 食物支出的 *分散性* 随着收入增加而增加
# 3. .最小二乘估计值对低收入观察的拟合效果很糟糕 (即 OLS 模型传入了大多数低收入家庭的数据)

x = np.arange(data.income.min(), data.income.max(), 50)
get_y = lambda a, b: a + b * x

fig, ax = plt.subplots(figsize=(8, 6))

for i in range(models.shape[0]):
    y = get_y(models.a[i], models.b[i])
    ax.plot(x, y, linestyle='dotted', color='grey')

y = get_y(ols['a'], ols['b'])

ax.plot(x, y, color='red', label='OLS')
ax.scatter(data.income, data.foodexp, alpha=.2)
ax.set_xlim((240, 3000))
ax.set_ylim((240, 2000))
legend = ax.legend()
ax.set_xlabel('Income', fontsize=16)
ax.set_ylabel(
    'Food expenditure', fontsize=16)

# ### 第二张图
#
# 黑色虚线在 10 个分位数回归估计周围形成了 95% 的逐点置信区间（黑色实线）。 红线代表 OLS 回归结果及其 95% 置信区间。

#在大多数情况下，分位数回归点估计值位于 OLS 置信区间之外，这表明收入对食物支出的影响在整个分布范围内可能不是固定的。

n = models.shape[0]
p1 = plt.plot(models.q, models.b, color='black', label='Quantile Reg.')
p2 = plt.plot(models.q, models.ub, linestyle='dotted', color='black')
p3 = plt.plot(models.q, models.lb, linestyle='dotted', color='black')
p4 = plt.plot(models.q, [ols['b']] * n, color='red', label='OLS')
p5 = plt.plot(models.q, [ols['lb']] * n, linestyle='dotted', color='red')
p6 = plt.plot(models.q, [ols['ub']] * n, linestyle='dotted', color='red')
plt.ylabel(r'$\beta_{income}$')
plt.xlabel('Quantiles of the conditional food expenditure distribution')
plt.legend()
plt.show()
